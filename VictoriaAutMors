local Players = game:GetService("Players")
local Teams = game:GetService("Teams")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer

local DEFAULT_HEAD_SIZE = Vector3.new(2, 1, 1)
local DEFAULT_KEY = Enum.KeyCode.LeftAlt
local keybind = DEFAULT_KEY
local ignoredTeams = {}
local teamLabelsEnabled = false

local headModEnabled = false
local getHeadSize = function() return 1 end
local getTransparency = function() return 0 end

local function findHead(char)
    return char and char:FindFirstChild("Head")
end

local function resetHead(head)
    if head then
        head.Size = DEFAULT_HEAD_SIZE
        head.Transparency = 0
        head.CanCollide = true
        head.Massless = false
    end
end

local function updateHead(player)
    if not player or player == LocalPlayer then return end
    if ignoredTeams[player.Team and player.Team.Name or ""] then
        resetHead(findHead(player.Character))
        return
    end

    local char = player.Character
    if not char then return end

    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
    local head = findHead(char)
    if humanoid and head and humanoid.Health > 0 then
        if headModEnabled then
            head.Size = DEFAULT_HEAD_SIZE * getHeadSize()
            head.Transparency = getTransparency()
            head.CanCollide = false
            head.Massless = true
        else
            resetHead(head)
        end
    else
        resetHead(head)
    end
end

local function applyAll()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            updateHead(player)
        end
    end
end

local function createTeamLabel(player)
    local char = player.Character
    local head = char and findHead(char)
    if not head then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "TeamLabel"
    billboard.Adornee = head
    billboard.Size = UDim2.new(0, 100, 0, 20)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = char

    local label = Instance.new("TextLabel", billboard)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = player.Name
    label.TextColor3 = player.Team and player.Team.TeamColor.Color or Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0.5
    label.TextScaled = true
end

local function removeTeamLabel(player)
    local char = player.Character
    if not char then return end
    local label = char:FindFirstChild("TeamLabel")
    if label then
        label:Destroy()
    end
end

local function updateAllTeamLabels()
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            removeTeamLabel(p)
            if teamLabelsEnabled then
                createTeamLabel(p)
            end
        end
    end
end

local gui = Instance.new("ScreenGui", game:GetService("CoreGui"))
gui.Name = "ClientESP_UI"
gui.ResetOnSpawn = false
gui.DisplayOrder = 1000

local openButton = Instance.new("TextButton", gui)
openButton.Size = UDim2.new(0, 100, 0, 40)
openButton.Position = UDim2.new(0, 10, 0, 10)
openButton.Text = "Open Menu"
openButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
openButton.TextColor3 = Color3.new(1, 1, 1)
openButton.Active = true
openButton.Draggable = true

local menu = Instance.new("Frame", gui)
menu.Size = UDim2.new(0, 250, 0, 400)
menu.Position = UDim2.new(0, 10, 0, 60)
menu.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
menu.Visible = false
menu.Active = true
menu.Draggable = true

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == keybind then
            menu.Visible = not menu.Visible
        end
    end
end)

openButton.MouseButton1Click:Connect(function()
    menu.Visible = not menu.Visible
end)

local function createLabel(text, y)
    local lbl = Instance.new("TextLabel", menu)
    lbl.Position = UDim2.new(0, 10, 0, y)
    lbl.Size = UDim2.new(0, 200, 0, 20)
    lbl.BackgroundTransparency = 1
    lbl.TextColor3 = Color3.new(1, 1, 1)
    lbl.Text = text
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    return lbl
end

local function createCheckbox(y, onToggle)
    local box = Instance.new("TextButton", menu)
    box.Size = UDim2.new(0, 20, 0, 20)
    box.Position = UDim2.new(0, 90, 0, y)
    box.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    box.Text = ""
    box.MouseButton1Click:Connect(function()
        local enabled = onToggle()
        box.BackgroundColor3 = enabled and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
    end)
    return box
end

local function createSlider(y, min, max, default)
    local frame = Instance.new("Frame", menu)
    frame.Position = UDim2.new(0, 10, 0, y)
    frame.Size = UDim2.new(0, 200, 0, 20)
    frame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

    local fill = Instance.new("Frame", frame)
    fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = Color3.fromRGB(120, 120, 255)

    local value = default
    local dragging = false

    local function update(x)
        local relX = math.clamp((x - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
        fill.Size = UDim2.new(relX, 0, 1, 0)
        value = min + relX * (max - min)
        applyAll()
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            update(input.Position.X)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            update(input.Position.X)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return function() return value end
end

createLabel("Head Mod:", 10)
createCheckbox(10, function()
    headModEnabled = not headModEnabled
    applyAll()
    return headModEnabled
end)

createLabel("Team Labels:", 40)
createCheckbox(40, function()
    teamLabelsEnabled = not teamLabelsEnabled
    updateAllTeamLabels()
    return teamLabelsEnabled
end)

createLabel("Head Size:", 100)
getHeadSize = createSlider(120, 1, 100, DEFAULT_HEAD_SIZE.X)

createLabel("Transparency:", 150)
getTransparency = createSlider(170, 0, 1, 0)

createLabel("Ignore Team (Head):", 365)
local dropdown = Instance.new("TextButton", menu)
dropdown.Size = UDim2.new(0, 200, 0, 25)
dropdown.Position = UDim2.new(0, 10, 0, 385)
dropdown.Text = "Select team to ignore..."
dropdown.TextColor3 = Color3.new(1, 1, 1)
dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

local function toggleTeamIgnore(teamName)
    if ignoredTeams[teamName] then
        ignoredTeams[teamName] = nil
    else
        ignoredTeams[teamName] = true
    end
    applyAll()
end

dropdown.MouseButton1Click:Connect(function()
    local teamDropdownOpen = not teamDropdownOpen
    for _, obj in ipairs(menu:GetChildren()) do
        if obj.Name == "TeamOption" then obj:Destroy() end
    end

    if not teamDropdownOpen then return end

    local y = 415
    for _, team in ipairs(Teams:GetTeams()) do
        local btn = Instance.new("TextButton", menu)
        btn.Name = "TeamOption"
        btn.Position = UDim2.new(0, 10, 0, y)
        btn.Size = UDim2.new(0, 200, 0, 20)
        btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
        btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        btn.TextColor3 = Color3.new(1, 1, 1)
        btn.MouseButton1Click:Connect(function()
            toggleTeamIgnore(team.Name)
            btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
        end)
        y += 25
    end
end)

local function setupPlayer(player)
    if player == LocalPlayer then return end

    player.CharacterAdded:Connect(function(char)
        char:WaitForChild("Humanoid").Died:Connect(function()
            resetHead(findHead(char))
        end)
        task.wait(0.1)
        updateHead(player)
        if teamLabelsEnabled then createTeamLabel(player) end
    end)

    player:GetPropertyChangedSignal("Team"):Connect(function()
        if teamLabelsEnabled then
            removeTeamLabel(player)
            createTeamLabel(player)
        end
        updateHead(player)
    end)

    if player.Character then
        updateHead(player)
        if teamLabelsEnabled then createTeamLabel(player) end
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    setupPlayer(player)
end

Players.PlayerAdded:Connect(setupPlayer)

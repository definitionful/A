-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Settings
local DEFAULT_HEAD_SIZE_R15 = Vector3.new(1.198, 1.202, 1.198)
local DEFAULT_HEAD_SIZE_R6 = Vector3.new(2, 1, 1)
local DEFAULT_KEY = Enum.KeyCode.LeftAlt
local keybind = DEFAULT_KEY

local function getDefaultHeadSize()
	local char = LocalPlayer.Character
	if char and char:FindFirstChild("Humanoid") then
		return char.Humanoid.RigType == Enum.HumanoidRigType.R15 and DEFAULT_HEAD_SIZE_R15 or DEFAULT_HEAD_SIZE_R6
	end
	return DEFAULT_HEAD_SIZE_R15
end

-- GUI Components (assumes you've kept the original GUI unchanged)
local gui = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ClientESP_UI")
local menu = gui:WaitForChild("Frame")
local headCheckbox = menu:FindFirstChild("TextButton") -- assumes it's the head mod checkbox
local highlightCheckbox = menu:FindFirstChildWhichIsA("TextButton", true)
local getHeadSize = nil
local getTransparency = nil

-- Find and bind sliders by name
for _, child in ipairs(menu:GetChildren()) do
	if child:IsA("Frame") then
		if not getHeadSize then
			getHeadSize = function() return tonumber(string.format("%.2f", child:FindFirstChildWhichIsA("Frame").Size.X.Scale * 29 + 1)) end
		elseif not getTransparency then
			getTransparency = function() return tonumber(string.format("%.2f", child:FindFirstChildWhichIsA("Frame").Size.X.Scale)) end
		end
	end
end

-- Internal State
local headModEnabled = false
local highlightEnabled = false
local processedHeads = {}
local processedHighlights = {}

-- Checkbox logic (re-detect if needed)
headCheckbox.MouseButton1Click:Connect(function()
	headModEnabled = not headModEnabled
	headCheckbox.BackgroundColor3 = headModEnabled and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
	processedHeads = {} -- clear cache to reapply instantly
end)

highlightCheckbox.MouseButton1Click:Connect(function()
	highlightEnabled = not highlightEnabled
	highlightCheckbox.BackgroundColor3 = highlightEnabled and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
	processedHighlights = {} -- clear cache to reapply instantly
end)

-- Apply Head Mod
local function applyHeadMod(player)
	if not headModEnabled or player == LocalPlayer or processedHeads[player] then return end
	local char = player.Character
	if not char then return end
	local head = char:FindFirstChild("Head")
	local humanoid = char:FindFirstChildWhichIsA("Humanoid")
	if not (head and humanoid) then return end

	local rigType = humanoid.RigType
	local baseSize = rigType == Enum.HumanoidRigType.R15 and DEFAULT_HEAD_SIZE_R15 or DEFAULT_HEAD_SIZE_R6
	local scale = getHeadSize()
	local transparency = getTransparency()

	head.Size = baseSize * scale
	head.Transparency = transparency
	head.BrickColor = head.BrickColor
	head.Material = head.Material
	head.CanCollide = false
	head.Massless = true

	processedHeads[player] = true
end

-- Apply Highlight
local function applyHighlight(player)
	if not highlightEnabled or player == LocalPlayer or processedHighlights[player] then return end
	local char = player.Character
	if not char then return end

	local old = char:FindFirstChildOfClass("Highlight")
	if old then old:Destroy() end

	local hl = Instance.new("Highlight")
	hl.Name = "ClientESP"
	hl.Adornee = char
	hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
	hl.FillTransparency = 1
	hl.OutlineTransparency = 0
	hl.OutlineColor = player.Team and player.Team.TeamColor.Color or Color3.new(1, 1, 1)
	hl.Parent = char

	processedHighlights[player] = true
end

-- Character hook
local function hookPlayer(player)
	player.CharacterAdded:Connect(function()
		task.wait(1)
		processedHeads[player] = nil
		processedHighlights[player] = nil
	end)
end

for _, player in ipairs(Players:GetPlayers()) do
	if player ~= LocalPlayer then
		hookPlayer(player)
	end
end
Players.PlayerAdded:Connect(function(player)
	if player ~= LocalPlayer then
		hookPlayer(player)
	end
end)

-- High-speed updater
RunService.Stepped:Connect(function()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			if headModEnabled then
				task.defer(function()
					applyHeadMod(player)
				end)
			end
			if highlightEnabled then
				task.defer(function()
					if not player.Character:FindFirstChild("ClientESP") then
						applyHighlight(player)
					end
				end)
			end
		end
	end
end)

-- Services
local Players = game:GetService("Players")
local Teams = game:GetService("Teams")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer

-- Settings
local DEFAULT_HEAD_SIZE_R15 = Vector3.new(1.198, 1.202, 1.198)
local DEFAULT_HEAD_SIZE_R6 = Vector3.new(2, 1, 1)
local DEFAULT_KEY = Enum.KeyCode.LeftAlt
local keybind = DEFAULT_KEY
local ignoredTeams = {}
local fullBrightEnabled = false
local teamDropdownOpen = false

-- Variables
local function getDefaultHeadSize()
	local char = LocalPlayer.Character
	if char and char:FindFirstChild("Humanoid") then
		return char.Humanoid.RigType == Enum.HumanoidRigType.R15 and DEFAULT_HEAD_SIZE_R15 or DEFAULT_HEAD_SIZE_R6
	end
	return DEFAULT_HEAD_SIZE_R15
end

local defaultHeadSize = getDefaultHeadSize()
local headModEnabled = false
local highlightEnabled = false
local lastRefreshTimes = {}
local deadPlayers = {}

-- GUI
local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
gui.Name = "ClientESP_UI"
gui.ResetOnSpawn = false

local openButton = Instance.new("TextButton", gui)
openButton.Size = UDim2.new(0, 100, 0, 40)
openButton.Position = UDim2.new(0, 10, 0, 10)
openButton.Text = "Open Menu"
openButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
openButton.TextColor3 = Color3.new(1, 1, 1)
openButton.Active = true
openButton.Draggable = true

local menu = Instance.new("Frame", gui)
menu.Size = UDim2.new(0, 250, 0, 350)
menu.Position = UDim2.new(0, 10, 0, 60)
menu.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
menu.Visible = false
menu.Active = true
menu.Draggable = true

RunService.RenderStepped:Connect(function()
	for _, frame in ipairs({menu, openButton}) do
		if frame.Visible then
			local pos = frame.AbsolutePosition
			local size = frame.AbsoluteSize
			local guiSize = gui.AbsoluteSize
			frame.Position = UDim2.new(0, math.clamp(pos.X, 0, guiSize.X - size.X), 0, math.clamp(pos.Y, 0, guiSize.Y - size.Y))
		end
	end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed and input.KeyCode == keybind then
		menu.Visible = not menu.Visible
	end
end)

openButton.MouseButton1Click:Connect(function()
	menu.Visible = not menu.Visible
end)

local function createLabel(text, y)
	local lbl = Instance.new("TextLabel", menu)
	lbl.Position = UDim2.new(0, 10, 0, y)
	lbl.Size = UDim2.new(0, 200, 0, 20)
	lbl.BackgroundTransparency = 1
	lbl.TextColor3 = Color3.new(1, 1, 1)
	lbl.Text = text
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	return lbl
end

local function createCheckbox(y, onToggle)
	local box = Instance.new("TextButton", menu)
	box.Size = UDim2.new(0, 20, 0, 20)
	box.Position = UDim2.new(0, 90, 0, y)
	box.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
	box.BorderColor3 = Color3.new(0, 0, 0)
	box.Text = ""
	box.MouseButton1Click:Connect(function()
		local enabled = onToggle()
		box.BackgroundColor3 = enabled and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
	end)
	return box
end

local function createSlider(y, min, max, default)
	local frame = Instance.new("Frame", menu)
	frame.Position = UDim2.new(0, 10, 0, y)
	frame.Size = UDim2.new(0, 200, 0, 20)
	frame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

	local fill = Instance.new("Frame", frame)
	fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
	fill.BackgroundColor3 = Color3.fromRGB(120, 120, 255)

	local value = default
	local dragging = false

	local function update(x)
		local relX = math.clamp((x - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
		fill.Size = UDim2.new(relX, 0, 1, 0)
		value = min + relX * (max - min)
	end

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			update(input.Position.X)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			update(input.Position.X)
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	return function() return value end
end

-- Controls
createLabel("Head Mod:", 10)
createCheckbox(10, function()
	headModEnabled = not headModEnabled
	return headModEnabled
end)

createLabel("Highlight:", 40)
createCheckbox(40, function()
	highlightEnabled = not highlightEnabled
	return highlightEnabled
end)

createLabel("Full Bright:", 70)
createCheckbox(70, function()
	fullBrightEnabled = not fullBrightEnabled
	return fullBrightEnabled
end)

createLabel("Head Size:", 100)
local getHeadSize = createSlider(120, 1, 30, defaultHeadSize.X)

createLabel("Transparency:", 150)
local getTransparency = createSlider(170, 0, 1, 0)

-- Keybind Setup
createLabel("Toggle Keybind:", 200)
local keyLabel = Instance.new("TextLabel", menu)
keyLabel.Position = UDim2.new(0, 120, 0, 200)
keyLabel.Size = UDim2.new(0, 100, 0, 20)
keyLabel.Text = keybind.Name
keyLabel.BackgroundTransparency = 1
keyLabel.TextColor3 = Color3.new(1, 1, 1)

local keyBox = Instance.new("TextBox", menu)
keyBox.Position = UDim2.new(0, 10, 0, 230)
keyBox.Size = UDim2.new(0, 200, 0, 25)
keyBox.PlaceholderText = "Press any key..."
keyBox.ClearTextOnFocus = false
keyBox.TextColor3 = Color3.new(1, 1, 1)
keyBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

keyBox.Focused:Connect(function()
	local conn
	conn = UserInputService.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Keyboard then
			keybind = input.KeyCode
			keyLabel.Text = keybind.Name
			keyBox:ReleaseFocus()
			conn:Disconnect()
		end
	end)
end)

-- Reset
local resetButton = Instance.new("TextButton", menu)
resetButton.Position = UDim2.new(0, 10, 0, 265)
resetButton.Size = UDim2.new(0, 200, 0, 30)
resetButton.Text = "Reset to Default"
resetButton.BackgroundColor3 = Color3.fromRGB(100, 30, 30)
resetButton.TextColor3 = Color3.new(1, 1, 1)
resetButton.MouseButton1Click:Connect(function()
	headModEnabled = false
	highlightEnabled = false
	fullBrightEnabled = false
	ignoredTeams = {}
end)

-- Dropdown for ignoring teams
createLabel("Ignore Team (Head):", 305)
local dropdown = Instance.new("TextButton", menu)
dropdown.Size = UDim2.new(0, 200, 0, 25)
dropdown.Position = UDim2.new(0, 10, 0, 325)
dropdown.Text = "Select team to ignore..."
dropdown.TextColor3 = Color3.new(1, 1, 1)
dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

local function toggleTeamIgnore(teamName)
	if ignoredTeams[teamName] then
		ignoredTeams[teamName] = nil
	else
		ignoredTeams[teamName] = true
	end

	-- Apply instantly to alive members
	for _, player in ipairs(Players:GetPlayers()) do
		if player.Team and player.Team.Name == teamName then
			local char = player.Character
			local humanoid = char and char:FindFirstChildOfClass("Humanoid")
			if humanoid and humanoid.Health > 0 then
				if headModEnabled then applyHeadMod(player) end
				if highlightEnabled then applyHighlight(player) end
			end
		end
	end
end

dropdown.MouseButton1Click:Connect(function()
	teamDropdownOpen = not teamDropdownOpen
	for _, obj in ipairs(menu:GetChildren()) do
		if obj.Name == "TeamOption" then obj:Destroy() end
	end

	if not teamDropdownOpen then return end

	local y = 355
	for _, team in ipairs(Teams:GetTeams()) do
		local btn = Instance.new("TextButton", menu)
		btn.Name = "TeamOption"
		btn.Position = UDim2.new(0, 10, 0, y)
		btn.Size = UDim2.new(0, 200, 0, 20)
		btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
		btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		btn.TextColor3 = Color3.new(1, 1, 1)
		btn.MouseButton1Click:Connect(function()
			toggleTeamIgnore(team.Name)
			btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
		end)
		y += 25
	end
end)

-- Logic
function applyHeadMod(player)
	if player == LocalPlayer or ignoredTeams[player.Team and player.Team.Name or ""] then return end
	local char = player.Character
	local head = char and char:FindFirstChild("Head")
	local humanoid = char and char:FindFirstChildOfClass("Humanoid")
	if head and humanoid then
		local baseSize = humanoid.RigType == Enum.HumanoidRigType.R15 and DEFAULT_HEAD_SIZE_R15 or DEFAULT_HEAD_SIZE_R6
		head.Size = baseSize * getHeadSize()
		head.Transparency = getTransparency()
		head.CanCollide = false
		head.Massless = true
	end
end

function applyHighlight(player)
	if player == LocalPlayer then return end
	local char = player.Character
	if not char then return end
	local hl = char:FindFirstChild("ClientESP") or Instance.new("Highlight")
	hl.Name = "ClientESP"
	hl.Adornee = char
	hl.FillTransparency = 1
	hl.OutlineTransparency = 0
	hl.OutlineColor = player.Team and player.Team.TeamColor.Color or Color3.new(1, 1, 1)
	hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
	hl.Parent = char
end

local function hookPlayer(player)
	player.CharacterAdded:Connect(function()
		task.wait(1)
		deadPlayers[player] = nil
		if highlightEnabled then applyHighlight(player) end
	end)
	player:GetPropertyChangedSignal("Team"):Connect(function()
		if highlightEnabled then applyHighlight(player) end
	end)
end

for _, p in ipairs(Players:GetPlayers()) do
	if p ~= LocalPlayer then hookPlayer(p) end
end
Players.PlayerAdded:Connect(function(p)
	if p ~= LocalPlayer then hookPlayer(p) end
end)

task.spawn(function()
	while true do
		for _, p in ipairs(Players:GetPlayers()) do
			if p ~= LocalPlayer and not ignoredTeams[p.Team and p.Team.Name or ""] then
				local char = p.Character
				local humanoid = char and char:FindFirstChildOfClass("Humanoid")
				if humanoid and humanoid.Health > 0 then
					deadPlayers[p] = nil
					if headModEnabled then pcall(function() applyHeadMod(p) end) end
					if highlightEnabled then pcall(function() applyHighlight(p) end) end
				elseif not deadPlayers[p] then
					local head = char and char:FindFirstChild("Head")
					if head and humanoid then
						local baseSize = humanoid.RigType == Enum.HumanoidRigType.R15 and DEFAULT_HEAD_SIZE_R15 or DEFAULT_HEAD_SIZE_R6
						head.Size = baseSize
						head.Transparency = 0
					end
					deadPlayers[p] = true
				end
			end
		end

		if fullBrightEnabled then
			Lighting.Ambient = Color3.new(1, 1, 1)
			Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
			Lighting.Brightness = 4
		end

		task.wait(5)
	end
end)

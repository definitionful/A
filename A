-- Services
local Players = game:GetService("Players")
local Teams = game:GetService("Teams")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer

-- Settings
local DEFAULT_HEAD_SIZE_R15 = Vector3.new(1.198, 1.202, 1.198)
local DEFAULT_HEAD_SIZE_R6 = Vector3.new(2, 1, 1)
local DEFAULT_MENU_KEY = Enum.KeyCode.LeftAlt
local DEFAULT_HEADMOD_KEY = Enum.KeyCode.H

local menuKeybind = DEFAULT_MENU_KEY
local headModKeybind = DEFAULT_HEADMOD_KEY
local ignoredTeams = {}
local teamDropdownOpen = false

-- State
local function getDefaultHeadSize()
	local char = LocalPlayer.Character
	if char and char:FindFirstChild("Humanoid") then
		return char.Humanoid.RigType == Enum.HumanoidRigType.R15 and DEFAULT_HEAD_SIZE_R15 or DEFAULT_HEAD_SIZE_R6
	end
	return DEFAULT_HEAD_SIZE_R15
end

local defaultHeadSize = getDefaultHeadSize()
local headModEnabled = false

-- GUI
local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
gui.Name = "ClientESP_UI"
gui.ResetOnSpawn = false

local openButton = Instance.new("TextButton", gui)
openButton.Size = UDim2.new(0, 100, 0, 40)
openButton.Position = UDim2.new(0, 10, 0, 10)
openButton.Text = "Open Menu"
openButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
openButton.TextColor3 = Color3.new(1, 1, 1)
openButton.Active = true
openButton.Draggable = true

local menu = Instance.new("Frame", gui)
menu.Size = UDim2.new(0, 250, 0, 250)
menu.Position = UDim2.new(0, 10, 0, 60)
menu.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
menu.Visible = false
menu.Active = true
menu.Draggable = true

RunService.RenderStepped:Connect(function()
	for _, frame in ipairs({menu, openButton}) do
		if frame.Visible then
			local pos = frame.AbsolutePosition
			local size = frame.AbsoluteSize
			local guiSize = gui.AbsoluteSize
			frame.Position = UDim2.new(0, math.clamp(pos.X, 0, guiSize.X - size.X), 0, math.clamp(pos.Y, 0, guiSize.Y - size.Y))
		end
	end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed then
		if input.KeyCode == menuKeybind then
			menu.Visible = not menu.Visible
		elseif input.KeyCode == headModKeybind then
			headModEnabled = not headModEnabled
			for _, p in ipairs(Players:GetPlayers()) do
				if p ~= LocalPlayer then
					applyHeadMod(p)
				end
			end
		end
	end
end)

openButton.MouseButton1Click:Connect(function()
	menu.Visible = not menu.Visible
end)

local function createLabel(text, y)
	local lbl = Instance.new("TextLabel", menu)
	lbl.Position = UDim2.new(0, 10, 0, y)
	lbl.Size = UDim2.new(0, 200, 0, 20)
	lbl.BackgroundTransparency = 1
	lbl.TextColor3 = Color3.new(1, 1, 1)
	lbl.Text = text
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	return lbl
end

local function createSlider(y, min, max, default)
	local frame = Instance.new("Frame", menu)
	frame.Position = UDim2.new(0, 10, 0, y)
	frame.Size = UDim2.new(0, 200, 0, 20)
	frame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

	local fill = Instance.new("Frame", frame)
	fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
	fill.BackgroundColor3 = Color3.fromRGB(120, 120, 255)

	local value = default
	local dragging = false

	local function update(x)
		local relX = math.clamp((x - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
		fill.Size = UDim2.new(relX, 0, 1, 0)
		value = min + relX * (max - min)
	end

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			update(input.Position.X)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			update(input.Position.X)
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	return function() return value end
end

createLabel("Head Size:", 10)
local getHeadSize = createSlider(30, 1, 100, defaultHeadSize.X)

createLabel("Team Ignore:", 60)
local dropdown = Instance.new("TextButton", menu)
dropdown.Size = UDim2.new(0, 200, 0, 25)
dropdown.Position = UDim2.new(0, 10, 0, 80)
dropdown.Text = "Select team to ignore..."
dropdown.TextColor3 = Color3.new(1, 1, 1)
dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

local function toggleTeamIgnore(teamName)
	if ignoredTeams[teamName] then
		ignoredTeams[teamName] = nil
	else
		ignoredTeams[teamName] = true
	end
	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= LocalPlayer then
			applyHeadMod(p)
		end
	end
end

dropdown.MouseButton1Click:Connect(function()
	teamDropdownOpen = not teamDropdownOpen
	for _, obj in ipairs(menu:GetChildren()) do
		if obj.Name == "TeamOption" then obj:Destroy() end
	end
	if not teamDropdownOpen then return end
	local y = 110
	for _, team in ipairs(Teams:GetTeams()) do
		local btn = Instance.new("TextButton", menu)
		btn.Name = "TeamOption"
		btn.Position = UDim2.new(0, 10, 0, y)
		btn.Size = UDim2.new(0, 200, 0, 20)
		btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
		btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		btn.TextColor3 = Color3.new(1, 1, 1)
		btn.MouseButton1Click:Connect(function()
			toggleTeamIgnore(team.Name)
			btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
		end)
		y += 25
	end
end)

-- Head Mod Logic
function applyHeadMod(player)
	if not player.Character or not player.Character:FindFirstChild("Humanoid") then return end
	local isAlive = player.Character:FindFirstChild("Humanoid").Health > 0
	if ignoredTeams[player.Team and player.Team.Name or ""] or not isAlive then
		local head = player.Character:FindFirstChild("Head")
		if head then
			head.Size = getDefaultHeadSize()
		end
		return
	end
	local head = player.Character:FindFirstChild("Head")
	if head then
		local rig = player.Character:FindFirstChildOfClass("Humanoid").RigType
		local baseSize = rig == Enum.HumanoidRigType.R15 and DEFAULT_HEAD_SIZE_R15 or DEFAULT_HEAD_SIZE_R6
		head.Size = baseSize * getHeadSize()
		head.CanCollide = false
		head.Massless = true
	end
end

-- Player Hook
local function hookPlayer(player)
	player.CharacterAdded:Connect(function()
		task.wait(0.5)
		if headModEnabled then applyHeadMod(player) end
	end)
	player:GetPropertyChangedSignal("Team"):Connect(function()
		if headModEnabled then applyHeadMod(player) end
	end)
end

for _, p in ipairs(Players:GetPlayers()) do
	if p ~= LocalPlayer then hookPlayer(p) end
end
Players.PlayerAdded:Connect(function(p)
	if p ~= LocalPlayer then hookPlayer(p) end
end)

-- Refresh logic
while true do
	task.wait(1)
	if headModEnabled then
		for _, p in ipairs(Players:GetPlayers()) do
			if p ~= LocalPlayer then
				applyHeadMod(p)
			end
		end
	end
end

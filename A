-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local Teams = game:GetService("Teams")

local LocalPlayer = Players.LocalPlayer

-- Settings
local DEFAULT_MENU_KEY = Enum.KeyCode.LeftAlt
local DEFAULT_HEADMOD_KEY = Enum.KeyCode.H
local DEFAULT_HEAD_SIZE_R15 = Vector3.new(1.198, 1.202, 1.198)
local DEFAULT_HEAD_SIZE_R6 = Vector3.new(2, 1, 1)

local menuKeybind = DEFAULT_MENU_KEY
local headModKeybind = DEFAULT_HEADMOD_KEY

-- State
local headModEnabled = false
local highlightEnabled = false
local fullbrightEnabled = false
local teamDropdownOpen = false
local ignoredTeams = {}

-- GUI setup
local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
gui.Name = "ClientESP_UI"
gui.ResetOnSpawn = false

-- Open Button
local openButton = Instance.new("TextButton", gui)
openButton.Size = UDim2.new(0, 100, 0, 40)
openButton.Position = UDim2.new(0, 10, 0, 10)
openButton.Text = "Open Menu"
openButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
openButton.TextColor3 = Color3.new(1, 1, 1)
openButton.Active = true
openButton.Draggable = true

-- Main Menu
local menu = Instance.new("Frame", gui)
menu.Size = UDim2.new(0, 250, 0, 400)
menu.Position = UDim2.new(0, 10, 0, 60)
menu.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
menu.Visible = false
menu.Active = true
menu.Draggable = true

-- GUI Utility
local function createLabel(text, y)
	local lbl = Instance.new("TextLabel", menu)
	lbl.Position = UDim2.new(0, 10, 0, y)
	lbl.Size = UDim2.new(0, 200, 0, 20)
	lbl.BackgroundTransparency = 1
	lbl.TextColor3 = Color3.new(1, 1, 1)
	lbl.Text = text
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	return lbl
end

local function createCheckbox(y, initialState, onToggle)
	local box = Instance.new("TextButton", menu)
	box.Size = UDim2.new(0, 20, 0, 20)
	box.Position = UDim2.new(0, 90, 0, y)
	box.BackgroundColor3 = initialState and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
	box.BorderColor3 = Color3.new(0, 0, 0)
	box.Text = ""
	box.MouseButton1Click:Connect(function()
		initialState = not initialState
		box.BackgroundColor3 = initialState and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
		onToggle(initialState)
	end)
	return box, function(state)
		initialState = state
		box.BackgroundColor3 = state and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
	end
end

local function createSlider(y, min, max, default)
	local frame = Instance.new("Frame", menu)
	frame.Position = UDim2.new(0, 10, 0, y)
	frame.Size = UDim2.new(0, 200, 0, 20)
	frame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

	local fill = Instance.new("Frame", frame)
	fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
	fill.BackgroundColor3 = Color3.fromRGB(120, 120, 255)

	local value = default
	local dragging = false

	local function update(x)
		local relX = math.clamp((x - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
		fill.Size = UDim2.new(relX, 0, 1, 0)
		value = min + relX * (max - min)
	end

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			update(input.Position.X)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			update(input.Position.X)
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	return function() return value end
end

-- Menu Toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed then
		if input.KeyCode == menuKeybind then
			menu.Visible = not menu.Visible
		elseif input.KeyCode == headModKeybind then
			headModEnabled = not headModEnabled
			if setHeadCheckbox then setHeadCheckbox(headModEnabled) end
		end
	end
end)

openButton.MouseButton1Click:Connect(function()
	menu.Visible = not menu.Visible
end)

-- Labels & Toggles
createLabel("Head Mod:", 10)
local _, setHeadCheckbox = createCheckbox(10, headModEnabled, function(state) headModEnabled = state end)

createLabel("Highlight:", 40)
createCheckbox(40, highlightEnabled, function(state) highlightEnabled = state end)

createLabel("Full Bright:", 70)
createCheckbox(70, fullbrightEnabled, function(state) fullbrightEnabled = state end)

createLabel("Head Size:", 100)
local getHeadSize = createSlider(120, 1, 100, 1)

createLabel("Transparency:", 150)
local getTransparency = createSlider(170, 0, 1, 0)

-- Keybind Labels
createLabel("Toggle Menu Keybind:", 200)
local menuKeyLabel = Instance.new("TextLabel", menu)
menuKeyLabel.Position = UDim2.new(0, 120, 0, 200)
menuKeyLabel.Size = UDim2.new(0, 100, 0, 20)
menuKeyLabel.Text = menuKeybind.Name
menuKeyLabel.BackgroundTransparency = 1
menuKeyLabel.TextColor3 = Color3.new(1, 1, 1)

local menuKeyBox = Instance.new("TextBox", menu)
menuKeyBox.Position = UDim2.new(0, 10, 0, 230)
menuKeyBox.Size = UDim2.new(0, 200, 0, 25)
menuKeyBox.PlaceholderText = "Set menu key..."
menuKeyBox.ClearTextOnFocus = false
menuKeyBox.TextColor3 = Color3.new(1, 1, 1)
menuKeyBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

menuKeyBox.Focused:Connect(function()
	local conn
	conn = UserInputService.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Keyboard then
			menuKeybind = input.KeyCode
			menuKeyLabel.Text = input.KeyCode.Name
			menuKeyBox:ReleaseFocus()
			conn:Disconnect()
		end
	end)
end)

createLabel("Head Mod Keybind:", 265)
local headKeyLabel = Instance.new("TextLabel", menu)
headKeyLabel.Position = UDim2.new(0, 120, 0, 265)
headKeyLabel.Size = UDim2.new(0, 100, 0, 20)
headKeyLabel.Text = headModKeybind.Name
headKeyLabel.BackgroundTransparency = 1
headKeyLabel.TextColor3 = Color3.new(1, 1, 1)

local headKeyBox = Instance.new("TextBox", menu)
headKeyBox.Position = UDim2.new(0, 10, 0, 295)
headKeyBox.Size = UDim2.new(0, 200, 0, 25)
headKeyBox.PlaceholderText = "Set head mod key..."
headKeyBox.ClearTextOnFocus = false
headKeyBox.TextColor3 = Color3.new(1, 1, 1)
headKeyBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

headKeyBox.Focused:Connect(function()
	local conn
	conn = UserInputService.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Keyboard then
			headModKeybind = input.KeyCode
			headKeyLabel.Text = input.KeyCode.Name
			headKeyBox:ReleaseFocus()
			conn:Disconnect()
		end
	end)
end)

-- Fullbright function
local originalLighting = {
    Ambient = Lighting.Ambient,
    Brightness = Lighting.Brightness,
    ClockTime = Lighting.ClockTime,
    ColorShift_Bottom = Lighting.ColorShift_Bottom,
    ColorShift_Top = Lighting.ColorShift_Top,
    OutdoorAmbient = Lighting.OutdoorAmbient,
}

local function applyFullbright()
    Lighting.Ambient = Color3.new(1, 1, 1)
    Lighting.Brightness = 10
    Lighting.ClockTime = 14
    Lighting.ColorShift_Bottom = Color3.new(0, 0, 0)
    Lighting.ColorShift_Top = Color3.new(0, 0, 0)
    Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
end

local function revertFullbright()
    for prop, val in pairs(originalLighting) do
        Lighting[prop] = val
    end
end

-- Highlight logic
local function createHighlightForCharacter(character)
    if not character:FindFirstChild("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.FillTransparency = getTransparency()
        highlight.OutlineTransparency = getTransparency()
        highlight.Parent = character
    end
end

-- HeadMod logic
local function updateHeadSize(character, size)
    local head = character:FindFirstChild("Head")
    if not head then return end

    if character:FindFirstChildWhichIsA("Humanoid") then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid.RigType == Enum.HumanoidRigType.R6 then
            head.Size = Vector3.new(size * 2, size, size)
        else
            head.Size = Vector3.new(size * 1.2, size * 1.2, size * 1.2)
        end
        for _, mesh in pairs(head:GetChildren()) do
            if mesh:IsA("SpecialMesh") then
                mesh.Scale = head.Size
            end
        end
    end
end

-- Monitor Players
local function onCharacterAdded(character, player)
    local function safeUpdate()
        if highlightEnabled and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
            createHighlightForCharacter(character)
        end
        if headModEnabled and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
            updateHeadSize(character, getHeadSize())
        end
    end

    if ignoredTeams[player.Team] then return end

    safeUpdate()

    character:WaitForChild("Humanoid").Died:Connect(function()
        local hl = character:FindFirstChild("Highlight")
        if hl then hl:Destroy() end
    end)
end

local function setupPlayer(player)
    player.CharacterAdded:Connect(function(char)
        onCharacterAdded(char, player)
    end)
    if player.Character then
        onCharacterAdded(player.Character, player)
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        setupPlayer(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        setupPlayer(player)
    end
end)

-- Update loop
RunService.RenderStepped:Connect(function()
    -- Handle Fullbright
    if fullbrightEnabled then
        applyFullbright()
    else
        revertFullbright()
    end

    -- Update highlight & head size in real-time
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            local char = player.Character
            local humanoid = char:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 and not ignoredTeams[player.Team] then
                if highlightEnabled then
                    createHighlightForCharacter(char)
                    local hl = char:FindFirstChild("Highlight")
                    if hl then
                        hl.FillTransparency = getTransparency()
                        hl.OutlineTransparency = getTransparency()
                    end
                else
                    local hl = char:FindFirstChild("Highlight")
                    if hl then hl:Destroy() end
                end

                if headModEnabled then
                    updateHeadSize(char, getHeadSize())
                end
            else
                local hl = char:FindFirstChild("Highlight")
                if hl then hl:Destroy() end
            end
        end
    end
end)

-- Team ignoring setup (if you want to show a dropdown later)
for _, team in ipairs(Teams:GetTeams()) do
    ignoredTeams[team] = false
end

-- Dropdown for ignoring teams (GUI)
createLabel("Ignore Team (Head):", 305)
local dropdown = Instance.new("TextButton", menu)
dropdown.Size = UDim2.new(0, 200, 0, 25)
dropdown.Position = UDim2.new(0, 10, 0, 325)
dropdown.Text = "Select team to ignore..."
dropdown.TextColor3 = Color3.new(1, 1, 1)
dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

local function toggleTeamIgnore(teamName)
	if ignoredTeams[teamName] then
		ignoredTeams[teamName] = nil
	else
		ignoredTeams[teamName] = true
	end
end

dropdown.MouseButton1Click:Connect(function()
	teamDropdownOpen = not teamDropdownOpen
	for _, obj in ipairs(menu:GetChildren()) do
		if obj.Name == "TeamOption" then obj:Destroy() end
	end

	if not teamDropdownOpen then return end

	local y = 355
	for _, team in ipairs(Teams:GetTeams()) do
		local btn = Instance.new("TextButton", menu)
		btn.Name = "TeamOption"
		btn.Position = UDim2.new(0, 10, 0, y)
		btn.Size = UDim2.new(0, 200, 0, 20)
		btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
		btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		btn.TextColor3 = Color3.new(1, 1, 1)
		btn.MouseButton1Click:Connect(function()
			toggleTeamIgnore(team.Name)
			btn.Text = (ignoredTeams[team.Name] and "[✔] " or "[  ] ") .. team.Name
		end)
		y += 25
	end
end)

-- Final setup to ensure checkbox reflects keybind toggle for HeadMod
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == keybind then
		menu.Visible = not menu.Visible
	elseif input.KeyCode == Enum.KeyCode.H then
		headModEnabled = not headModEnabled

		-- Update the visual state of the checkbox
		for _, obj in pairs(menu:GetChildren()) do
			if obj:IsA("TextButton") and obj.Position == UDim2.new(0, 90, 0, 10) then
				obj.BackgroundColor3 = headModEnabled and Color3.new(0, 1, 0) or Color3.fromRGB(80, 80, 80)
			end
		end
	end
end)
